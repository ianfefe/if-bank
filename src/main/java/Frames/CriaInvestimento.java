//Nome: Ian Felix Fernandes Matrícula: 202376007

package Frames;

import Usuario.Gerente;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import java.awt.*;
import java.text.ParseException;

public class CriaInvestimento extends JFrame {
    private JTextField campoNome;
    private JFormattedTextField campoResgateMax;
    private JFormattedTextField campoResgateMin;
    private JFormattedTextField campoRendimento;
    private JButton botaoConfirmar;
    private JButton botaoCancelar;
    private JPanel criacaoInvestimentoPanel;

    public CriaInvestimento(Gerente usuarioLogado) {
        setSize(400, 250);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setContentPane(criacaoInvestimentoPanel);
        aplicaMascaraTempoResgate();
        aplicaMascaraRendimento();
        Utility.adicionaBotaoCancelarOperacao(botaoCancelar, this);

        botaoConfirmar.addActionListener(e -> {
            if (validaCamposPreenchidos()) {
                try {
                    int diasMin = Integer.parseInt(campoResgateMin.getText().replaceAll("[^\\d]", ""));
                    int diasMax = Integer.parseInt(campoResgateMax.getText().replaceAll("[^\\d]", ""));

                    double rendimentoString = Double.parseDouble(campoRendimento.getText().replaceAll("%", ""));
                    usuarioLogado.cadastraRendaFixa(campoNome.getText(), diasMin, diasMax, rendimentoString);
                    dispose();
                } catch (RuntimeException ex) {
                    JOptionPane.showMessageDialog(null, "Não foi possível cadastrar o investimento solicitado.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Todos os campos devem estar preenchidos.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void aplicaMascaraTempoResgate() {
        try {
            MaskFormatter formataData = new MaskFormatter("#### dias");
            formataData.setPlaceholderCharacter('_');

            campoResgateMin.setFormatterFactory(new DefaultFormatterFactory(formataData));
            campoResgateMax.setFormatterFactory(new DefaultFormatterFactory(formataData));
        } catch (ParseException e) {
            System.err.println("Erro ao aplicar máscara de tempo resgate. " + e.getMessage());
        }
    }

    private void aplicaMascaraRendimento() {
        try {
            MaskFormatter formataRendimento = new MaskFormatter("##.##%");
            formataRendimento.setPlaceholderCharacter('_');

            campoRendimento.setFormatterFactory(new DefaultFormatterFactory(formataRendimento));
        } catch (ParseException e) {
            System.err.println("Erro ao aplicar máscara de rendimento. " + e.getMessage());
        }
    }

    private boolean validaCamposPreenchidos() {
        return (!campoRendimento.getText().replaceAll("[.%]", "").isEmpty() &&
                !campoNome.getText().isEmpty() &&
                !campoResgateMin.getText().replaceAll("/", "").isEmpty() &&
                !campoResgateMax.getText().replaceAll("/", "").isEmpty());


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        criacaoInvestimentoPanel = new JPanel();
        criacaoInvestimentoPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Nome");
        criacaoInvestimentoPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        campoNome = new JTextField();
        criacaoInvestimentoPanel.add(campoNome, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Tempo mínimo de resgate (em dias)");
        criacaoInvestimentoPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Tempo máximo de resgate (em dias)");
        criacaoInvestimentoPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        campoResgateMax = new JFormattedTextField();
        criacaoInvestimentoPanel.add(campoResgateMax, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        campoResgateMin = new JFormattedTextField();
        criacaoInvestimentoPanel.add(campoResgateMin, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        campoRendimento = new JFormattedTextField();
        campoRendimento.setText("");
        criacaoInvestimentoPanel.add(campoRendimento, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Rendimento anual");
        criacaoInvestimentoPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        botaoConfirmar = new JButton();
        botaoConfirmar.setText("Confirmar");
        criacaoInvestimentoPanel.add(botaoConfirmar, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        botaoCancelar = new JButton();
        botaoCancelar.setText("Cancelar");
        criacaoInvestimentoPanel.add(botaoCancelar, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return criacaoInvestimentoPanel;
    }

}
