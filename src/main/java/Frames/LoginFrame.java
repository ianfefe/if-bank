//Nome: Ian Felix Fernandes Matrícula: 202376007
package Frames;

import Usuario.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Locale;

public class LoginFrame extends JFrame {
    private JFormattedTextField campoUsuario;
    private JPasswordField campoSenha;
    private JButton botaoLogin;
    private JButton botaoCadastro;
    private JPanel loginPanel;
    private JLabel usuario;
    private JLabel senha;

    public LoginFrame() {

        setSize(400, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setContentPane(loginPanel);

        botaoLogin.addActionListener(e -> {

            validarCampos(e);
            Object usuarioLogin = Sistema.logarUsuario(formataUsuarioCliente(), new String(campoSenha.getPassword()));

            System.out.println(usuarioLogin.getClass().getSimpleName());

            if (usuarioLogin instanceof Cliente) {
                SwingUtilities.invokeLater(() -> new MenuCliente((Cliente) usuarioLogin).setVisible(true));
                dispose();
            } else if (usuarioLogin instanceof Caixa) {
                SwingUtilities.invokeLater(() -> new MenuCaixa((Caixa) usuarioLogin).setVisible(true));
                dispose();
            } else if (usuarioLogin instanceof Gerente) {
                SwingUtilities.invokeLater(() -> new MenuGerente((Gerente) usuarioLogin).setVisible(true));
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possível logar usuário, tipo desconhecido.");
                throw new RuntimeException("Não foi possível logar usuário, tipo desconhecido.");
            }
        });

        botaoCadastro.addActionListener(e -> {
            dispose();
            new CadastroFrame().setVisible(true);
        });

    }

    private String formataUsuarioCliente() {
        if (campoUsuario.getText().matches("\\d{11}")) {
            String parte1 = campoUsuario.getText().substring(0, 3);
            String parte2 = campoUsuario.getText().substring(3, 6);
            String parte3 = campoUsuario.getText().substring(6, 9);
            String parte4 = campoUsuario.getText().substring(9, 11);

            return parte1 + "." + parte2 + "." + parte3 + "-" + parte4;
        } else {
            return campoUsuario.getText();
        }
    }

    private void validarCampos(ActionEvent e) {

        boolean todosPreenchidos = !campoUsuario.getText().isBlank();

        if (new String(campoSenha.getPassword()).isBlank())
            todosPreenchidos = false;

        if (!todosPreenchidos)
            JOptionPane.showMessageDialog(null, "Todos os campos são obrigatórios.", "Erro", JOptionPane.ERROR_MESSAGE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.setMinimumSize(new Dimension(250, 150));
        loginPanel.setPreferredSize(new Dimension(250, 150));
        loginPanel.setBorder(BorderFactory.createTitledBorder(null, "Login", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        campoUsuario = new JFormattedTextField();
        campoUsuario.setText("");
        campoUsuario.setToolTipText("Digite apenas os números do CPF para acessar. Ex: 12345678910");
        panel1.add(campoUsuario, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        usuario = new JLabel();
        usuario.setText("Usuário");
        panel1.add(usuario, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        campoSenha = new JPasswordField();
        panel2.add(campoSenha, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        senha = new JLabel();
        senha.setEnabled(true);
        senha.setText("Senha");
        panel2.add(senha, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.add(panel3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        botaoCadastro = new JButton();
        botaoCadastro.setText("Registre-se");
        panel3.add(botaoCadastro, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        botaoLogin = new JButton();
        botaoLogin.setHideActionText(false);
        botaoLogin.setText("Login");
        panel3.add(botaoLogin, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Unispace", -1, 26, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setOpaque(false);
        label1.setText("Bem-vindo ao IF Bank");
        loginPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginPanel;
    }

}
